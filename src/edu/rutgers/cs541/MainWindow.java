package edu.rutgers.cs541;

import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import javax.swing.SwingWorker.StateValue;

import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.JButton;

import edu.rutgers.cs541.ReturnValue.Code;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.*;

import javax.swing.JScrollPane;

import java.awt.Component;
import java.awt.SystemColor;
import javax.swing.JTree;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JCheckBox;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.JList;


/**
 * This class is the main form that will be visible to the user
 *
 */
public class MainWindow {

	//this is a handle to the H2-back query comparison engine 
	//  (that you want to improve) 
	private QueryComparer mQueryComparer;
	
	// a handle for any worker that is executing
	private SwingWorker<ReturnValue, Object> mCurrentWorker;
	
	// this instance of a listener will be called when the 
	//  worker finished execution
	private QueryCompareListener mCompareListener = new QueryCompareListener();
	
	//get the OS-dependent line separator
	private String lineSeparator = System.getProperty("line.separator");
	
	private JFrame mMonteCarloQueryForm;
	private JLabel mSchemaLabel;
	private JTextArea mSchemaTextArea;
	private JLabel mQuery1Label;
	private JTextArea mQuery1TextArea;
	private JLabel mQuery2Label;
	private JTextArea mQuery2TextArea;
	private JLabel mOutputLabel;
	private JTextArea mOutputTextArea;
	private JButton mStartButton;
	private JButton mCancelButton;
	private JButton mLoadSchemaButton;
	private JButton mLoadQuery1Button;
	private JButton mLoadQuery2Button;
	private JTextField mInstanceSizeTextField;
	private JList mResultList;
	private JTextArea mResultsTextArea;
	private DefaultListModel listModel;
	
	private DefaultMutableTreeNode resultsNode;
	private JFileChooser fc;

	/**
	 * Create the application.
	 */
	public MainWindow() {
		initialize();
	}
	
	/**
	 * Initialize the contents of the frame.
	 * 
	 * This code was generated by the Designer in Eclipse,
	 *  then slightly modified. 
	 */
	private void initialize() {
		mMonteCarloQueryForm = new JFrame();
		mMonteCarloQueryForm.getContentPane().setBackground(SystemColor.scrollbar);
		mMonteCarloQueryForm.setResizable(false);
		mMonteCarloQueryForm.setTitle("Monte Carlo Query Comparer");
		mMonteCarloQueryForm.setBounds(100, 100, 1200, 714);
		mMonteCarloQueryForm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		mMonteCarloQueryForm.getContentPane().setLayout(null);
		
		mSchemaLabel = new JLabel("Schema ");
		mSchemaLabel.setBounds(22, 13, 222, 16);
		mSchemaLabel.setHorizontalAlignment(SwingConstants.LEFT);
		mMonteCarloQueryForm.getContentPane().add(mSchemaLabel);
		
		mSchemaTextArea = new JTextArea();
		mSchemaLabel.setLabelFor(mSchemaTextArea);
		mSchemaTextArea.setBounds(22, 32, 720, 152);
		JScrollPane schemaTextAreaScrollPane = new JScrollPane(mSchemaTextArea);
		schemaTextAreaScrollPane.setBounds(22, 32, 222, 386);
		mMonteCarloQueryForm.getContentPane().add(schemaTextAreaScrollPane);
		
		mQuery1Label = new JLabel("Query1");
		mQuery1Label.setBounds(254, 13, 131, 16);
		mMonteCarloQueryForm.getContentPane().add(mQuery1Label);
		JScrollPane query1TextAreaScrollPane = new JScrollPane();
		query1TextAreaScrollPane.setBounds(254, 32, 222, 386);
		mMonteCarloQueryForm.getContentPane().add(query1TextAreaScrollPane);
		
		mQuery1TextArea = new JTextArea();
		query1TextAreaScrollPane.setViewportView(mQuery1TextArea);
		mQuery1Label.setLabelFor(mQuery1TextArea);
		
		mQuery2Label = new JLabel("Query2");
		mQuery2Label.setBounds(486, 13, 131, 16);
		mMonteCarloQueryForm.getContentPane().add(mQuery2Label);
		JScrollPane query2TextAreaScrollPane = new JScrollPane();
		query2TextAreaScrollPane.setBounds(486, 32, 222, 386);
		mMonteCarloQueryForm.getContentPane().add(query2TextAreaScrollPane);
		
		mQuery2TextArea = new JTextArea();
		query2TextAreaScrollPane.setViewportView(mQuery2TextArea);
		mQuery2Label.setLabelFor(mQuery2TextArea);
		
		mStartButton = new JButton("Start Analysis");
		mStartButton.addActionListener(new StartButtonActionListener());
		mStartButton.setBounds(752, 33, 122, 25);
		mMonteCarloQueryForm.getContentPane().add(mStartButton);
		
		mCancelButton = new JButton("Cancel");
		mCancelButton.setBounds(886, 33, 97, 25);
		mCancelButton.addActionListener(new CancelButtonActionListener());
		mCancelButton.setEnabled(false);
		mMonteCarloQueryForm.getContentPane().add(mCancelButton);
		JScrollPane outputTextAreaScrollPane = new JScrollPane();
		outputTextAreaScrollPane.setBounds(22, 491, 686, 158);
		mMonteCarloQueryForm.getContentPane().add(outputTextAreaScrollPane);
		
		mOutputTextArea = new JTextArea();
		outputTextAreaScrollPane.setViewportView(mOutputTextArea);
		mOutputTextArea.setEditable(false);
		//mOutputLabel.setLabelFor(mOutputTextArea);
		
		mOutputLabel = new JLabel("Output");
		mOutputLabel.setLabelFor(mOutputTextArea);
		mOutputLabel.setBounds(22, 464, 104, 16);
		mMonteCarloQueryForm.getContentPane().add(mOutputLabel);
		
		mLoadSchemaButton = new JButton("Load Schema");
		mLoadSchemaButton.addActionListener(new LoadSchemaButtonActionListener());
		mLoadSchemaButton.setBounds(22, 430, 153, 23);
		mMonteCarloQueryForm.getContentPane().add(mLoadSchemaButton);
		
		mLoadQuery1Button = new JButton("Load Query1");
		mLoadQuery1Button.addActionListener(new LoadQuery1ButtonActionListener());
		mLoadQuery1Button.setBounds(254, 430, 153, 23);
		mMonteCarloQueryForm.getContentPane().add(mLoadQuery1Button);
		
		mLoadQuery2Button = new JButton("Load Query2");
		mLoadQuery2Button.addActionListener(new LoadQuery2ButtonActionListener());
		mLoadQuery2Button.setBounds(486, 429, 153, 23);
		mMonteCarloQueryForm.getContentPane().add(mLoadQuery2Button);
		
		mInstanceSizeTextField = new JTextField();
		mInstanceSizeTextField.setBounds(1117, 35, 39, 20);
		mMonteCarloQueryForm.getContentPane().add(mInstanceSizeTextField);
		mInstanceSizeTextField.setColumns(10);
		
		JLabel mInstanceSizeLabel = new JLabel("Max Instance Size:");
		mInstanceSizeLabel.setBounds(993, 38, 114, 14);
		mMonteCarloQueryForm.getContentPane().add(mInstanceSizeLabel);
		
		JScrollPane resultsJListScrollPane = new JScrollPane();
		resultsJListScrollPane.setBounds(752, 92, 404, 254);
		mMonteCarloQueryForm.getContentPane().add(resultsJListScrollPane);
		
		listModel = new DefaultListModel();
		mResultList = new JList(listModel);
		resultsJListScrollPane.setViewportView(mResultList);
		mResultList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		mResultList.addListSelectionListener(new ResultListSelectionListener());
		
		
		resultsNode = new DefaultMutableTreeNode("Solutions Found:");
		mResultsTextArea = new JTextArea();
		JScrollPane resultsTextAreaScrollPane = new JScrollPane(mResultsTextArea);
		resultsTextAreaScrollPane.setBounds(752, 357, 404, 292);
		mMonteCarloQueryForm.getContentPane().add(resultsTextAreaScrollPane);
		resultsTextAreaScrollPane.setViewportView(mResultsTextArea);
		
		JLabel mResultsLabel = new JLabel("Results:");
		mResultsLabel.setBounds(752, 71, 55, 14);
		mMonteCarloQueryForm.getContentPane().add(mResultsLabel);

		
		// initialize the QueryComparer (& H2 DB)
		mQueryComparer = new QueryComparer();
		ReturnValue rv = mQueryComparer.init();
		if(rv.getCode() != Code.SUCCESS) {
			//this should not happen, but would likely be due
			// to an H2 initialization problem
			mStartButton.setEnabled(false);
			putReturnValueContentsInOutputWindow(rv);
		}
		
		fc = new JFileChooser();
	}

	private class LoadSchemaButtonActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e)
		{
			fc.showOpenDialog(mLoadSchemaButton);
			File file = fc.getSelectedFile();
			
			try {
				FileInputStream in = new FileInputStream(file);
				BufferedReader bf = new BufferedReader(new InputStreamReader(in));
				String schemaInput = "";
				while(bf.ready())
				{
					schemaInput += bf.readLine();
					schemaInput += "\n";
				}
				mSchemaTextArea.setText("");
				mSchemaTextArea.setText(schemaInput);
				
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
		}
	}
	
	private class LoadQuery1ButtonActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e)
		{
			fc.showOpenDialog(mLoadQuery1Button);
			File file = fc.getSelectedFile();
			
			try {
				FileInputStream in = new FileInputStream(file);
				BufferedReader bf = new BufferedReader(new InputStreamReader(in));
				String query1Input = "";
				while(bf.ready())
				{
					query1Input += bf.readLine();
					query1Input += "\n";
				}
				mQuery1TextArea.setText("");
				mQuery1TextArea.setText(query1Input);
				
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
		}
	}
	
	private class LoadQuery2ButtonActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e)
		{
			fc.showOpenDialog(mLoadQuery2Button);
			File file = fc.getSelectedFile();
			
			try {
				FileInputStream in = new FileInputStream(file);
				BufferedReader bf = new BufferedReader(new InputStreamReader(in));
				String query2Input = "";
				while(bf.ready())
				{
					query2Input += bf.readLine();
					query2Input += "\n";
				}
				mQuery2TextArea.setText("");
				mQuery2TextArea.setText(query2Input);
				
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (IOException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
		}
	}
	
	private class ResultListSelectionListener implements ListSelectionListener {
		public void valueChanged(ListSelectionEvent e)
		{
			if(mResultList.getSelectedValue() != null)
			{
				ResultInfo result = (ResultInfo) mResultList.getSelectedValue();
				mResultsTextArea.setText("");
				mResultsTextArea.setText(result.getResult());
			}
			
		}
	}
	/**
	 * This ActionListener will be called when the user clicks
	 *   the start button 
	 *
	 */
	private class StartButtonActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			//prevent the user from clicking start again
			mStartButton.setEnabled(false);
			//clear any old output
			mOutputTextArea.setText("");
			mOutputTextArea.setText("Starting Run...");
			
			//get the schema and queries from their respective textboxes
			String schema = mSchemaTextArea.getText();
			String query1 = mQuery1TextArea.getText();
			String query2 = mQuery2TextArea.getText();
			String userInstanceSize = mInstanceSizeTextField.getText();
			
			// create a worker to test these user inputs
			mCurrentWorker 
				= mQueryComparer.getCompareWorker(schema, query1, query2, userInstanceSize);

			//set the callback (PropertyChangeListener) for the worker
			mCurrentWorker.addPropertyChangeListener(mCompareListener);
			
			//start the worker (executes on a worker thread)
			mCurrentWorker.execute();
			
			//allow the user to click the cancel button
			mCancelButton.setEnabled(true);
		}		
	}
	
	/**
	 * This PropertyChangeListener get called when the
	 *  Worker changes state (PENDING, STARTED, DONE).
	 */
	private class QueryCompareListener implements PropertyChangeListener {
		@Override
		public void propertyChange(PropertyChangeEvent evt) {
			//when the worker is done, call handleQueryCompareCompletion()
			// to display results
			if(mCurrentWorker.getState() == StateValue.DONE) {
				handleWorkerCompletion();
			}
		}
	}
	
	/**
	 * This method when called the worker finishes
	 *  (either due to finding an instance, or to user cancellation)
	 */
	private void handleWorkerCompletion() {
		//make sure the user cannot attempt to cancel again
		mCancelButton.setEnabled(false);
		ReturnValue rv = null;
		if(mCurrentWorker.isCancelled()) {
			// if the user cancelled, then there is nothing to show
			mOutputTextArea.setText("User cancelled");
		} else {
			// the user must not have cancelled, 
			//  so get the results from the worker 
			try {
				mOutputTextArea.setText("Run Complete");
				rv = mCurrentWorker.get();
				listModel.addElement(rv.getResultInfo());
				
				//display the results to the user
				putReturnValueContentsInOutputWindow(rv);
			} catch (Exception e) {
				// this should not happen, but would likely be
				//  due to a threading issue
				mOutputTextArea.setText("Error while getting results");
				mOutputTextArea.append(lineSeparator);
				StringWriter stringWriter = new StringWriter(); 
				e.printStackTrace(new PrintWriter(stringWriter));
				mOutputTextArea.append(stringWriter.toString());
			}
		}
		
		//allow the user to start the comparer again
		mStartButton.setEnabled(true);
	}
	
	/**
	 * This helper method puts the contents of a ReturnValue
	 *  into the output window in the GUI.
	 * @param rv - The ReturnValue whose contents should be shown
	 */
	private void putReturnValueContentsInOutputWindow(ReturnValue rv) {
		//clear any old contents
		
		//append the text message, if it has one
		if(rv.hasMessage()) {
			/*
			mOutputTextArea.append(rv.getMessage());
			mOutputTextArea.append(lineSeparator);
			*/
		}
		//append the stack trace of the exception, if it has one
		if(rv.hasException()) {
			Exception e = rv.getException();
			StringWriter stringWriter = new StringWriter(); 
			e.printStackTrace(new PrintWriter(stringWriter));
			mOutputTextArea.append(stringWriter.toString());
		}
	}
	
	
	/**
	 * When the user clicks the cancel button,
	 * this ActionListener is called
	 */
	private class CancelButtonActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			//prevent the user from clicking false again
			mCancelButton.setEnabled(false);

			//tell the worker to stop trying to find an instance
			//  (this will cause QueryCompareListener to be fired)
			mCurrentWorker.cancel(true);
		}		
	}
	
	/**
	 * Changes the form's visibility 
	 * @param visible - false for invisible
	 */
	public void setVisible(boolean visible) {
		mMonteCarloQueryForm.setVisible(visible);
	}
}
